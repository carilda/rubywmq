class GenerateConst
  
  #Extract Constants from Header files  
  # This now has to take into account differing values for 32-bit and 64-bit
  def GenerateConst.extract_const(filename, const_prefix, start_exp=nil, end_exp=nil)
    @constants = []
    active = if start_exp then false else true end    # Sure there is a better way
    File.open(filename) do |file|
      file.each do |line|
        line.rstrip!
        if line.length > 0   # Skip empty lines
          if active
            break if start_exp && line.match(end_exp)
            # Skip Comment lines, then check for a match
            if (line !~ /^\s*\/\*/) && (match = /\s*#define\s+(#{const_prefix}\w+)[\(\s]+([-\\\w\dx\'\"\s]+)/.match(line))
              @constants << [match[1], match[2]]
            end
          else
            next unless line.match(start_exp)
            active = true
          end
        end
      end
    end
    @constants
  end
  
  #Extract MQ Constants from Header files  
  def GenerateConst.rb_const(filename, const_prefix, exclude_exp=nil)
    str = ''
    GenerateConst.extract_const(filename, const_prefix).each do |item|
      const, val = item
      next if const.include?('_STRUC_ID')
      next if exclude_exp && const.match(exclude_exp)
      if val.include?('"') || val.include?("'")
        if match = val.match(/(\w+)/)
          val = "'#{match[0]}'"
        else
          val = "''"
        end
      end
      str << "   %-30s = #{val}\n" % const
    end
    str
  end
  
  def GenerateConst.config(filename, prefix)
    str = "# WMQ::QueueManager execute commands\n"
    str << "execute_commands:\n"
    GenerateConst.extract_const(filename,prefix).each do |item|
      name = item[0].gsub(prefix,'').downcase
      str << "  :%-26s " % "#{name}:"
      match = name.match(/\w+?_([\w_]+)/)
      str << ":#{match[1]}" if match
      str << "\n"
    end
    str
  end
  
  def GenerateConst.wmq_const(path)
    str = <<END_OF_STRING
################################################################################
#  Copyright 2006 J. Reid Morrison. Dimension Solutions, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
################################################################################
#
#  WARNING: DO NOT MODIFY THIS FILE
#
#  This file was generated by generate_const.rb.
#
################################################################################
module WMQ
END_OF_STRING
    [ ['Connect Options','cmqc.h','MQCNO_',/(VERSION)|(CONN_TAG)|(HANDLE_SHARE)/],
      ['Open Options', 'cmqc.h','MQOO_' ],
      ['Close Options', 'cmqc.h','MQCO_'],
      ['Match Options', 'cmqc.h','MQMO_'],
      ['Message Format Options', 'cmqc.h','MQFMT_',/(_ARRAY)/],
      ['Get Message Options', 'cmqc.h','MQGMO_',/(VERSION)/],
      ['Transport Types', 'cmqxc.h','MQXPT_'] ,
      ['Report Options', 'cmqc.h', 'MQRO_'],
      ['Message Types', 'cmqc.h', 'MQMT_'],
      ['Expiry', 'cmqc.h', 'MQEI_'],
      ['Feedback Values', 'cmqc.h', 'MQFB_'],
      ['Encoding Values', 'cmqc.h', 'MQENC_'],
      ['Coded Character Set Identifiers', 'cmqc.h', 'MQCCSI_'],
      ['Priority', 'cmqc.h', 'MQPRI_'],
      ['Persistence', 'cmqc.h', 'MQPER_'],
      ['Put Application Types', 'cmqc.h', 'MQAT_'],
      ['Message Flags', 'cmqc.h', 'MQMF_'],
      ['Original Length', 'cmqc.h', 'MQOL_'],
      ['Put Message Options', 'cmqc.h', 'MQPMO_',/(VERSION)|(LENGTH)/],
      ['Put Message Record Fields', 'cmqc.h', 'MQPMRF_',/(VERSION)|(LENGTH)/],
      ['Reason Codes', 'cmqc.h','MQRC_'],
      ].each do |item|
      str << "\n# #{item[0]}\n"
      str << GenerateConst.rb_const("#{path}/#{item[1]}", item[2], item[3])
    end
    str << "end\n"
  end
  
  def GenerateConst.admin_consts(path)
    str = <<END_OF_STRING
################################################################################
#  Copyright 2006 J. Reid Morrison. Dimension Solutions, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
################################################################################
#
#  WARNING: DO NOT MODIFY THIS FILE
#
#  This file was generated by generate_const.rb.
#
################################################################################
module WMQ
END_OF_STRING
    str << "# Admin constants from cmqc.h\n"
    [ ['Object Types', 'cmqc.h', 'MQOT_'],
      ['Security Identifier Types', 'cmqc.h', 'MQSIDT_'],
      ['Channel Types', 'cmqxc.h', 'MQCHT_'],
      ].each do |item|
      str << "\n# #{item[0]}\n"
      str << GenerateConst.rb_const("#{path}/#{item[1]}", item[2], item[3])
    end
    GenerateConst.extract_const(path+'cmqc.h', 'MQ', /Queue\sAttributes/, /typedef/).each do |item|
      str << "   %-30s = #{item[1]}\n" % item[0]
    end
    str << "# Admin constants from cmqcfc.h\n"
    GenerateConst.extract_const(path+'cmqcfc.h', 'MQ', /Parameter\s+Values/, /typedef\s+struct/).each do |item|
      str << "   %-30s = #{item[1]}\n" % item[0]
    end
    str << "end\n"
  end
  
  def self.generate(path, target_path='')
    File.open(File.join(target_path,'wmq_const_admin.rb'), 'w') {|file| file.write(GenerateConst.admin_consts(path))}
    puts 'Generated wmq_const_admin.rb'
    File.open(File.join(target_path,'wmq_const.rb'), 'w') {|file| file.write(GenerateConst.wmq_const(path))}
    puts 'Generated wmq_const.rb'
  end
end  

if $0 == __FILE__
  path = ARGV[0] || raise("Mandatory parameter: 'WebSphere MQ Include path' is missing")
  target = ARGV[1] || '.'
  GenerateConst.generate(path, target)
end
